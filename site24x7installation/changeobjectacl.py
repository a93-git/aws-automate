import boto3
import logging
import os
import time

time.sleep(10)

logger = logging.getLogger()
logger.setLevel(logging.INFO)

role_arn = os.environ['Role_ARN']
external_id = os.environ['External_Id']

def get_temp_creds(role_arn, external_id):
    """ Retrieve temporary security credentials

    Arguments:
    role_arn - ARN of the AWS role to assume (in the customer's account)
    external_id - An alphanumeric string configured as an added security measure

    Return:
    Returns a tuple of access key, secret access key and session token
    """
    logger.info("Getting temporary access credentials for Role ARN {0}".format(role_arn))
    try:
        client_sts = boto3.client('sts')
        a = client_sts.assume_role(RoleSessionName='test-session', RoleArn=role_arn, DurationSeconds=900, ExternalId=external_id)
        access_key = a['Credentials']['AccessKeyId']
        secret_access_key = a['Credentials']['SecretAccessKey']
        session_token = a['Credentials']['SessionToken']
        return (access_key, secret_access_key, session_token)
    except Exception as e:
        logger.info("Error in getting temporary security credentials")
        logger.error(e)
        return (None, None, None)


def s3_put_object_acl(bucket_name, object_key, client_s3):
    """ Put canned ACL 'bucket-owner-full-control' to provide the Master account to have access to the log
    files generated by the SSM command

    Arguments:
    bucket_name - name of the bucket where the output is being stored
    object_key - object key for which we want to change the ACL (Note: the key should have all the prefixes)
    
    Return:
    None
    """

    try:
        client_s3.put_object_acl(
            ACL='bucket-owner-full-control',
            Bucket=bucket_name,
            Key=object_key
        )
    except Exception as e:
        logger.info("Error in changing the ACL of the object {0} in bucket {1}".format(object_key, bucket_name))
        logger.error(e)


def fix_acl(value, client_s3):
    """ Attempts to fix the ACL

    Arguments:
    value - Record entry with the bucket and key details
    client_s3 - Interface to S3 service

    Return:
    None
    """

    _flow = False
    try:
        bucket_name = value['bucket_name']
        command_id = value['command_id']
        prefix = value['prefix']
        instance_id = value['instance_id']
        script_name = value['script_name']
        _flow = True
    except Exception as e:
        logger.info('Error in putting ACL')
        logger.info('Incomplete information')
        logger.error(e)
    
    if _flow:
        if 'AWS-RunPowerShellScript' in script_name:
            try:
                object_key_1 = prefix + '/' + command_id + '/' + instance_id + '/awsrunPowerShellScript/0.awsrunPowerShellScript/stdout'
                s3_put_object_acl(bucket_name, object_key_1, client_s3)
            except Exception as e:
                logger.info("Error in putting ACL for {0}".format(object_key_1))
                logger.error(e)
            try:
                object_key_2 = prefix + '/' + command_id + '/' + instance_id + '/awsrunPowerShellScript/0.awsrunPowerShellScript/stderr'
                s3_put_object_acl(bucket_name, object_key_2, client_s3)
            except Exception as e:
                logger.info("Error in putting ACL for {0}".format(object_key_2))
                logger.error(e)
        elif 'AWS-RunShellScript' in script_name:
            try:
                object_key_1 = prefix + '/' + command_id + '/' + instance_id + '/awsrunShellScript/0.awsrunShellScript/stdout'
                s3_put_object_acl(bucket_name, object_key_1, client_s3)
            except Exception as e:
                logger.info("Error in putting ACL for {0}".format(object_key_1))
                logger.error(e)
            try:
                object_key_2 = prefix + '/' + command_id + '/' + instance_id + '/awsrunShellScript/0.awsrunShellScript/stderr'
                s3_put_object_acl(bucket_name, object_key_2, client_s3)
            except Exception as e:
                logger.info("Error in putting ACL for {0}".format(object_key_2))
                logger.error(e) 
                    
def lambda_handler(event, context):
    _time = time.time()
    creds = get_temp_creds(role_arn, external_id)

    if None in creds:
        logger.error("Security credentials couldn't be retrieved. Exiting...")
        exit()
    client_s3 = boto3.client('s3', 
        aws_access_key_id=creds[0], 
        aws_secret_access_key=creds[1], 
        aws_session_token=creds[2])

    retval = event
    
    for value in eval(retval['Records'][0]['Sns']['Message']):
        if 'bucket_name' in value.keys() and 'command_id' in value.keys() and 'prefix' in value.keys() and 'instance_id' in value.keys() and 'script_name' in value.keys():
                fix_acl(value, client_s3)
        else:
            logger.info(value.keys())
            logger.error('Not all keys are present')
    
    return "Time of execution: {0}s".format(time.time() - _time)